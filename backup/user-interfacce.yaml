esphome:
  name: user-interfacce
  friendly_name: user-interfacce
  includes:
    - custom_components/ps_pwm/ps_pwm.h
    - custom_components/ps_pwm/ps_pwm.c
    - custom_components/ps_pwm/ps_pwm_custom_component.h

esp32:
  board: esp32dev
  framework:
    # type: arduino
    type: esp-idf
    # version: 5.4.0
    # # Custom sdkconfig options
    # sdkconfig_options:
    #   COMPILER_OPTIMIZATION_SIZE: y
    # # Advanced tweaking options
    # advanced:
    #   ignore_efuse_mac_crc: false

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:
  encryption:
    key: "OThOwK3i9wr7mnGlELVt+Gp4It17kJKA5Ebghaxge80="
  reboot_timeout: 0s

ota:
  password: "133f49ce6222a838ee022bce1b792730"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Yjpark Fallback Hotspot"
    password: "0F9PtM8S3a4g"

  # Optional manual IP
  manual_ip:
    static_ip: 192.168.10.141
    gateway: 192.168.10.1
    subnet: 255.255.255.0

captive_portal:

# 변수 설정
globals:
  - id: pharameter
    type: int
    restore_value: false
    initial_value: '-1'

  - id: voltage
    type: int
    restore_value: True
  
  - id: current
    type: int
    restore_value: True
  
  - id: frequency
    type: int
    restore_value: True
    initial_value: '15000'
  
  - id: duty
    type: float
    restore_value: True

switch:
  # IO확장모듈 pin0번에 led연결
  - platform: gpio
    name: "PCF8574 Pin #0"
    id: led_toggle
    pin:
      pcf8574: pcf8574_hub
      number: 0
      mode:
        output: true
      inverted: false
    # restore_mode: ALWAYS_ON
    # on_turn_on:
    #   - delay: 500ms

# Encoder버튼으로 파라미터 선택
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO34
      inverted: True
      mode:
        input: True
    name: "Rotary Encoder Button"
    on_press:
      then:
        - lambda: |-
            id(pharameter)++;
            if(id(pharameter)==4) {
              id(pharameter)=0;
            }
            ESP_LOGD("BUTTION PRESS", "i==%d", id(pharameter));
            if(id(pharameter)==0) {
              id(my_nextion).send_command_printf("n0.borderc=63488");
              id(my_nextion).send_command_printf("n5.borderc=0");
            }
            else if(id(pharameter)==1) {
              id(my_nextion).send_command_printf("n0.borderc=0");
              id(my_nextion).send_command_printf("n2.borderc=63488");
            }
            else if(id(pharameter)==2) {
              id(my_nextion).send_command_printf("n2.borderc=0");
              id(my_nextion).send_command_printf("n4.borderc=63488");
            }
            else if(id(pharameter)==3) {
              id(my_nextion).send_command_printf("n4.borderc=0");
              id(my_nextion).send_command_printf("n5.borderc=63488");
            }

  # io확장모듈 pin1번 led switch로 사용
  - platform: gpio
    name: "PCF8574 Pin #1"
    pin:
      pcf8574: pcf8574_hub
      number: 1
      mode: INPUT
      inverted: false
    on_press:
      - switch.toggle: led_toggle

  - platform: custom
    lambda: |-
      auto my_sensor = new PSpwmCustomBinarySensor();
      App.register_component(my_sensor);
      return {my_sensor};

    binary_sensors:
      - name: "PSPWM Error Sensor"

ads1115:
  - address: 0x48

sensor:
  # encoder로 값 설정
  - platform: rotary_encoder
    name: "Rotary Encoder"
    id: my_rotary_encoder
    pin_a: GPIO32
    pin_b: GPIO33
    resolution: 2
    publish_initial_value: True
    restore_mode: RESTORE_DEFAULT_ZERO
    on_clockwise:
      then:
        - lambda: |-
            if(id(pharameter)==0) {
              id(voltage)++;
              id(my_nextion).set_component_value("n0", id(voltage));
            }
            else if(id(pharameter)==1) {
              id(current)++;
              id(my_nextion).set_component_value("n2", id(current));
            }
            else if(id(pharameter)==2) {
              if(id(frequency)>=40000){
                id(frequency)=40000;
              }
              id(frequency)=id(frequency)+1000;
              id(my_nextion).set_component_value("n4", id(frequency)/1000);
              id(pspwm).update_frequency(id(frequency));
            }
            else if(id(pharameter)==3) {
              if(id(duty)>=1){
                id(duty)=1;
              }
              id(duty)=id(duty)+0.01;
              id(my_nextion).set_component_value("n5", id(duty)*100);
              id(pspwm).set_level(id(duty));
            }
    on_anticlockwise:
      then:
        - lambda: |-
            if(id(pharameter)==0) {
              id(voltage)--;
              id(my_nextion).set_component_value("n0", id(voltage));
            }
            else if(id(pharameter)==1) {
              id(current)--;
              id(my_nextion).set_component_value("n2", id(current));
            }
            else if(id(pharameter)==2) {
              if(id(frequency)<=15000){
                id(frequency)=15000;
              }
              id(frequency)=id(frequency)-1000;
              id(my_nextion).set_component_value("n4", id(frequency)/1000);
              id(pspwm).update_frequency(id(frequency));
            }
            else if(id(pharameter)==3) {
              if(id(duty)<=0){
                id(duty)=0;
              }
              id(duty)=id(duty)-0.01;
              id(my_nextion).set_component_value("n5", id(duty)*100);
              id(pspwm).set_level(id(duty));
            }

# ADC값 출력
  - platform: ads1115
    multiplexer: 'A0_GND'
    gain: 6.144
    name: "ADS1115 Channel A0-GND"
    id: ads1115_1
    # update_interval: 5s

  - platform: ads1115
    multiplexer: 'A1_GND'
    gain: 6.144
    name: "ADS1115 Channel A1_GND"
    id: ads1115_2
    # update_interval: 5s
  
  - platform: ads1115
    multiplexer: 'A2_GND'
    gain: 6.144
    name: "ADS1115 Channel A2_GND"
    id: ads1115_3
    # update_interval: 5s
  
  - platform: ads1115
    multiplexer: 'A3_GND'
    gain: 6.144
    name: "ADS1115 Channel A3_GND"
    id: ads1115_4
    # update_interval: 5s

interval:
  #DAC에서 출력할 전압 설정
  - interval: 0.5s
    then:
      - output.set_level:
          id: ac_dimmer_1
          # level: !lambda 'return id(ads1115_1).state;'
          level: 100%
      - output.set_level:
          id: ac_dimmer_2
          level: 30%
      - output.set_level:
          id: ac_dimmer_3
          level: 60%
      - output.set_level:
          id: ac_dimmer_4
          level: 100%

  # #io확장모듈 led 점멸
  # - interval: 3s
  #   then:
  #     - switch.toggle: led_toggle

# NEXTION HMI
uart:
  id: uart_1
  rx_pin: GPIO17
  tx_pin: GPIO16
  baud_rate: 9600

display:
  - platform: nextion
    id: my_nextion
    uart_id: uart_1
    # 전원ON/OFF 시 hmi에 이전값 유지
    lambda: |-
      id(my_nextion).set_component_value("n0", id(voltage));
      id(my_nextion).set_component_value("n2", id(current));
      id(my_nextion).set_component_value("n4", id(frequency)/1000);
      id(my_nextion).set_component_value("n5", id(duty)*100);
    # hmi touch할 때 터치한 곳의 정보 전달
    on_touch:
      then:
        lambda: |-
          if(component_id==1) {
            id(pharameter)=0;
          }
          else if(component_id==2) {
            id(pharameter)=1;
          }
          else if(component_id==3) {
            id(pharameter)=2;
          }
          else if(component_id==4) {
            id(pharameter)=3;
          }

i2c:
  sda: GPIO21
  scl: GPIO22
  scan: True

mcp4728:
  - id: dac_output

# MCP4728 Configuration(DAC최대 출력 전압 설정)
output:
- platform: mcp4728
  id: ac_dimmer_1
  mcp4728_id: dac_output
  channel: A
  vref: vdd
  power_down: normal # default

- platform: mcp4728
  id: ac_dimmer_2
  mcp4728_id: dac_output
  channel: B
  vref: vdd

- platform: mcp4728
  id: ac_dimmer_3
  mcp4728_id: dac_output
  channel: C
  vref: vdd
  power_down: normal # default

- platform: mcp4728
  id: ac_dimmer_4
  channel: D
  vref: internal
  gain: X2

# pspwm 설정
- platform: custom
  type: float
  lambda: |-
    auto pspwm_custom_output = new PSpwmCustomOutput();
    App.register_component(pspwm_custom_output);
    return {pspwm_custom_output};
  outputs: 
    - id: pspwm

#I/O확장모듈
pcf8574:
  - id: 'pcf8574_hub'
    address: 0x38
    pcf8575: false

# number:
#   - platform: template
#     name: "ps_pwm_frequency"
#     id: ps_pwm_frequency
#     optimistic: true
#     min_value: 15000
#     max_value: 40000
#     # initial_value: 20000
#     restore_value: true
#     step: 1000
#     on_value: 
#       - lambda: |-
#           id(pspwm).update_frequency(x);
#   - platform: template
#     name: "ps_pwm_duty"
#     id: ps_pwm_duty
#     optimistic: true
#     min_value: 0
#     max_value: 1
#     # initial_value: 0.45
#     restore_value: true
#     step: 0.01
#     on_value:
#       - lambda: |-
#           id(pspwm).set_level(x);